using System;
using System.Collections.Generic;
using System.Linq;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using NWheels.DataObjects;
using NWheels.UI;
using NWheels.UI.Toolbox;
using NWheels.UI.Uidl;

namespace NWheels.Domains.Security.UI
{
    public class UserAccountCrudScreenPart<TDerivedEntity> : CrudScreenPart<TDerivedEntity>
        where TDerivedEntity : class, IUserAccountEntity
    {
        public UserAccountCrudScreenPart(string idName, UidlApplication parent)
            : base(idName, parent)
        {
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public void LimitToAccountsOfType<T>() where T : TDerivedEntity
        {
            this.Crud.FilterByType<T>();
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        public UidlCommand ChangePassword { get; set; }
        public EntityMethodForm<TDerivedEntity, IChangePasswordInput> ChangePasswordForm { get; set; }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        #region Overrides of CrudScreenPart<IUserAccountEntity>

        protected override void DescribePresenter(PresenterBuilder<CrudScreenPart<TDerivedEntity>, Empty.Data, IState> presenter)
        {
            base.DescribePresenter(presenter);
            Crud.Grid.Column(x => x.LoginName)
                .Column(x => x.FullName)
                .Column(x => x.UserRolesText, title: "Roles")
                .Column(x => x.LastLoginAtUtc, title: "LastLoginUTC")
                .Column(x => x.IsLockedOut, title: "LockedOut");

            if (Crud.Form != null)
            {
                ConfigureForm(Crud.Form);
            }

            if (Crud.FormTypeSelector != null)
            {
                Crud.FormTypeSelector.ForEachWidgetOfType<IUidlForm>(ConfigureForm);
            }

            ChangePassword.Severity = CommandSeverity.Change;
            ChangePassword.Icon = "lock";

            ChangePasswordForm.InputForm
                .Field(x => x.NewPassword, modifiers: FormFieldModifiers.Password | FormFieldModifiers.Confirm);

            presenter.On(Crud.SelectedEntityChanged).Broadcast(ChangePasswordForm.EntitySetter).WithPayload(vm => vm.Input).TunnelDown();
            ChangePasswordForm.AttachTo(
                presenter, 
                command: ChangePassword, 
                onExecute: (user, vm) => user.SetPassword(vm.State.Input.NewPassword));

            Crud.AddEntityCommands(ChangePassword);
        }

        #endregion

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        private void ConfigureForm(IUidlForm form)
        {
            form.DisableAutoGeneratedFields();
            form
                .FieldOf<IUserAccountEntity>(x => x.CreatedAtUtc, label: "CreatedAtUTC")
                .FieldOf<IUserAccountEntity>(x => x.LastLoginAtUtc, label: "LastLoginAtUTC")
                .FieldOf<IUserAccountEntity>(x => x.AssociatedRoles, label: "Roles", setup: f => {
                    var userRoleGrid = (DataGrid<IUserRoleEntity>)f.NestedWidget;
                    userRoleGrid
                        .Column(x => x.Name)
                        .Column(x => x.Description, size: FieldSize.Large)
                        .Column(x => x.ClaimValue, title: "ClaimValue", size: FieldSize.Large);
                })
                .FieldOf<IUserAccountEntity>(x => x.EmailVerification);
            form.ShowFieldsOf<IUserAccountEntity>(
                x => x.LoginName,
                x => x.FullName,
                x => x.EmailAddress,
                x => x.CreatedAtUtc, 
                x => x.LastLoginAtUtc,
                x => x.IsEmailVerified,
                x => x.IsPasswordExpired,
                x => x.FailedLoginCount,
                x => x.IsLockedOut,
                x => x.AssociatedRoles,
                x => x.EmailVerification);
        }

        //-----------------------------------------------------------------------------------------------------------------------------------------------------

        [ViewModelContract]
        public interface IChangePasswordInput
        {
            [PropertyContract.Semantic.Password, PropertyContract.Security.Sensitive]
            SecureString NewPassword { get; set; }
        }
    }

    //---------------------------------------------------------------------------------------------------------------------------------------------------------

    public class UserAccountCrudScreenPart : UserAccountCrudScreenPart<IUserAccountEntity>
    {
        public UserAccountCrudScreenPart(string idName, UidlApplication parent)
            : base(idName, parent)
        {
        }
    }
}
